{"remainingRequest":"/home/runner/work/U2_Fundamentos_Economia_B6/U2_Fundamentos_Economia_B6/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Fundamentos_Economia_B6/U2_Fundamentos_Economia_B6/src/views/curso/Tema3.vue?vue&type=template&id=82fe7d94&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Fundamentos_Economia_B6/U2_Fundamentos_Economia_B6/src/views/curso/Tema3.vue","mtime":1743482813993},{"path":"/home/runner/work/U2_Fundamentos_Economia_B6/U2_Fundamentos_Economia_B6/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_Economia_B6/U2_Fundamentos_Economia_B6/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_Economia_B6/U2_Fundamentos_Economia_B6/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_Economia_B6/U2_Fundamentos_Economia_B6/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Fundamentos_Economia_B6/U2_Fundamentos_Economia_B6/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}